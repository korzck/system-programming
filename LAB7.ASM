MYCODE SEGMENT 'CODE'
	;äéêÖñäàâ äéçëíÄçíàç àì5-41?
	ASSUME CS:MYCODE, DS:MYCODE
	WELCOME DB 'ÇÇÖÑàíÖ óàëãé (Ç îéêåÄíÖ: HHHH)',13,10,'$'
	CONVERTED_NUMBER DB 5 DUP('0'),'$','$'
	TERM DB '00001','$','$'
	TEMP DB '00000', '$','$'
	INPUT_NUMBER DB 4 DUP(0),'$','$'
	RES DB '00000','$','$'
	QUIT DB 'óàëãé Ç ÑÖëüíÖêàóçéâ ëàëíÖåÖ - ','$'
START:

	PUSH CS
	POP DS
	CALL CLRSCR

	MAIN_CYCLE:
		LEA DX, WELCOME
		CALL PRINT
		
		LEA BX, INPUT_NUMBER
		MOV SI, 0
		MOV CX, 4
		SMALL_CYCLE:
			CALL GETCH
			CMP AX, '*'
			JE EXIT
			MOV BX[SI], AX
			INC SI
			CALL PUTCH
		LOOP SMALL_CYCLE
		CALL CRLF
		
		LEA BX, INPUT_NUMBER
		MOV DX, BX[0]
		CMP DL, 30H
		JE L2
		CALL FIRST_PART
		L2:
		LEA BX, INPUT_NUMBER
		MOV DX, BX[1]
		CMP DL, 30H
		JE L3
		CALL SECOND_PART
		L3:
		LEA BX, INPUT_NUMBER
		MOV DX, BX[2]
		CMP DL, 30H
		JE L4
		CALL THIRD_PART
		L4:
		LEA BX, INPUT_NUMBER
		MOV DX, BX[3]
		CMP DL, 30H
		JE LEND
		CALL FOURTH_PART
		LEND:

		LEA DX, QUIT
		CALL PRINT
		LEA DX, CONVERTED_NUMBER
		CALL PRINT

	EXIT:
		MOV AL, 0
		MOV AH, 4CH
		INT 21H
		RETN
	

	FIRST_PART PROC
		LEA BX, INPUT_NUMBER
		MOV CX, BX[0]
		SUB CX, 30H
		MOV CH, CL
		MOV CL, 0
		SHL CH, 4
		CALL DEC_MUL
		CALL RES_TO_CN
		
		CALL NULLING
		RETN
	FIRST_PART ENDP

	SECOND_PART PROC
		LEA BX, INPUT_NUMBER
		MOV CX, BX[1]
		SUB CX, 30H
		MOV CH, CL
		MOV CL, 0
		CALL DEC_MUL
		CALL CN_TO_TERM
		CALL DEC_ADD
		CALL RES_TO_CN

		CALL NULLING
		RETN
	SECOND_PART ENDP

	THIRD_PART PROC
		LEA BX, INPUT_NUMBER
		MOV CX, BX[2]
		SUB CX, 30H
		MOV CH, 0
		SHL CX, 4
		CALL DEC_MUL
		CALL CN_TO_TERM
		CALL DEC_ADD
		CALL RES_TO_CN

		CALL NULLING
		RETN
	THIRD_PART ENDP

	FOURTH_PART PROC
		LEA BX, INPUT_NUMBER
		MOV CX, BX[3]
		SUB CX, 30H
		MOV CH, 0
		CALL DEC_MUL
		CALL CN_TO_TERM
		CALL DEC_ADD
		CALL RES_TO_CN

		CALL NULLING
		RETN
	FOURTH_PART ENDP

	NULLING PROC
		LEA BX, TERM
		MOV BX[0], '0'
		MOV BX[1], '0'
		MOV BX[2], '0'
		MOV BX[3], '0'
		MOV BX[4], '1'

		LEA BX, RES
		MOV BX[0], '0'
		MOV BX[1], '0'
		MOV BX[2], '0'
		MOV BX[3], '0'
		MOV BX[4], '0'
		RETN
	NULLING ENDP

	CN_TO_TERM PROC
		MOV SI, 0
		CN_TO_TERM_CYCLE:
			LEA BX, CONVERTED_NUMBER
			MOV AX, BX[SI]
			LEA BX, TERM
			MOV BX[SI], AX
			CMP SI, 4
			JE CN_TO_TERM_CYCLE_RETURN
			INC SI
			JMP CN_TO_TERM_CYCLE
		CN_TO_TERM_CYCLE_RETURN:
		RETN
	CN_TO_TERM ENDP


	RES_TO_CN PROC
		MOV SI, 0
		RES_TO_CN_CYCLE:
			LEA BX, RES
			MOV AX, BX[SI]
			LEA BX, CONVERTED_NUMBER
			MOV BX[SI], AX
			CMP SI, 4
			JE RES_TO_CN_CYCLE_RETURN
			INC SI
			JMP RES_TO_CN_CYCLE
		RES_TO_CN_CYCLE_RETURN:
		RETN
	RES_TO_CN ENDP

	DEC_MUL PROC
		;???????? CX ?? TERM ? ?????? ? RES
		LEA BX, RES
		MOV RES[0], '0' ;????????? RES
		MOV RES[1], '0'
		MOV RES[2], '0'
		MOV RES[3], '0'
		MOV RES[4], '0'
		CYCLE:
			PUSH CX
			CALL DEC_ADD
			POP CX
		LOOP CYCLE
		RETN
	DEC_MUL ENDP

	DEC_ADD PROC
		;ADD RES, TERM
		MOV CL, 5
		MOV CH, 0
		LEA BX, TEMP
		MOV BX[0], '0'
		MOV BX[1], '0'
		MOV BX[2], '0'
		MOV BX[3], '0'
		MOV BX[4], '0'
		SUMMING_CYCLE:
			MOV SI, CX
			SUB SI, 1

			LEA BX, TERM
			MOV DX, BX[SI]
			;MOV DH, 0
			SUB DL, 30H

			LEA BX, RES
			MOV AX, BX[SI]
			;MOV AH, 0
			SUB AL, 30H

			ADD AL, DL
			CMP AL, 10
			JGE DO_OVERFLOW
			ADD AL, 30H
			MOV BX[SI], AX
			JMP SUMMING_CYCLE_RETURN
			DO_OVERFLOW:
			CALL OVERFLOW

			SUMMING_CYCLE_RETURN:	
			
		LOOP SUMMING_CYCLE

		MOV CX, 0005H
		OVERFLOW_CYCLE:
			MOV SI, CX
			SUB SI, 1
			LEA BX, TEMP
			MOV DX, BX[SI]
			LEA BX, RES
			MOV AX, BX[SI]
			ADD AL, DL
			SUB AL, 30H
			MOV BX[SI], AX
		LOOP OVERFLOW_CYCLE
		RETN
	DEC_ADD ENDP

	OVERFLOW PROC
		CMP AL, 10
		JE OVERFLOW_TRANSFORM_A
		CMP AL, 11
		JE OVERFLOW_TRANSFORM_B
		CMP AL, 12
		JE OVERFLOW_TRANSFORM_C
		CMP AL, 13
		JE OVERFLOW_TRANSFORM_D
		CMP AL, 14
		JE OVERFLOW_TRANSFORM_E
		CMP AL, 15
		JE OVERFLOW_TRANSFORM_F
		CMP AL, 16
		JE OVERFLOW_TRANSFORM_10
		CMP AL, 17
		JE OVERFLOW_TRANSFORM_11
		CMP AL, 18
		JE OVERFLOW_TRANSFORM_12

		OVERFLOW_TRANSFORM_A:
			MOV AL, 00H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_B:
			MOV AL, 01H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_C:
			MOV AL, 02H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_D:
			MOV AL, 03H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_E:
			MOV AL, 04H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_F:
			MOV AL, 05H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_10:
			MOV AL, 06H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_11:
			MOV AL, 07H
			JMP OVERFLOW_TRANSFORM_RETURN
		OVERFLOW_TRANSFORM_12:
			MOV AL, 08H
			JMP OVERFLOW_TRANSFORM_RETURN
		
		OVERFLOW_TRANSFORM_RETURN:
		AND AL, 00001111B
		ADD AL, 30H
		LEA BX, RES
		MOV BX[SI], AX
		LEA BX, TEMP
		MOV DX, BX[SI-1]
		MOV DL, 31H
		MOV BX[SI-1], DL
		RETN

	OVERFLOW ENDP

	PUTCH PROC
		MOV AH, 02H
		INT 021H
		RETN
	PUTCH ENDP

	CRLF PROC
		PUSH DX
		MOV DL, 10
		CALL PUTCH
		MOV DL, 13
		CALL PUTCH
		POP DX
		RETN
	CRLF ENDP

	GETCH PROC
		MOV AH, 08H		;????? ???????? ? AL
		INT 21H
		MOV DL, AL
		RETN
	GETCH ENDP

	CLRSCR PROC
		PUSH AX
		PUSH DX
		MOV AX, 03
		INT 10H
		POP AX
		POP DX
		RETN
	CLRSCR ENDP

	PRINT PROC
		PUSH AX
		MOV AH, 09h
		INT 21H
		POP AX
		RETN
	PRINT ENDP

MYCODE ENDS
END START